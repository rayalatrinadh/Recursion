package com.Recursion.trinadh.Sorting;

import java.util.*;

public class MergeSortInPlace {
    public static void main(String[] args) {
        int[] arr = {-7,5,7,9,3,-2,6,4,0};
         mergeSortInplace(arr,0,arr.length);
        System.out.println(Arrays.toString(arr));
    }
    static void mergeSortInplace(int[] arr,int s,int e){
        if(e - s == 1){
            return;
        }

        int mid = s + (e - s)/2;

        mergeSortInplace(arr,s,mid);
        mergeSortInplace(arr,mid,e);
        mergeInPlace(arr,s,mid,e);
    }
    static void mergeInPlace(int[] arr,int s,int m,int e){
        int[] mix = new int[e -s];

        int i = s;//pointer for first array
        int j = m;//pointer for second array
        int k = 0;//pointer for new mix array

        while(i < m && j < e){
            if(arr[i] < arr[j]){
                mix[k] = arr[i];
                i++;
            }else{
                mix[k] = arr[j];
                j++;
            }
            k++;
        }

        while(i < m){
            mix[k] = arr[i];
            i++;
            k++;
        }
        while(j < e){
            mix[k] =  arr[j];
            j++;
            k++;
        }
         for(int l = 0; l < mix.length; l++){
             arr[s+l] = mix[l];
         }
    }
}
